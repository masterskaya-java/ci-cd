name: Timetable CI/CD Pipeline

on:
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Клонирование репозитория внутрь VM GitHub Actions и checkout нужной ветки
      - name: Repository checkout
        uses: actions/checkout@v4

      - name: Debug SONAR secrets
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          echo "SONAR_HOST_URL=$SONAR_HOST_URL"
          echo "SONAR_TOKEN=${SONAR_TOKEN:0:4}***"
      
      # Кеширование (для последующих сборок) Maven зависимостей
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      # Установка JDK 21 для компиляции и запуска приложения в следующих шагах, а также использования mvn 
      - name: Java setup
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
      
      # Проверка кода на соответствие google-java-format
      - name: Google Java Format validation
        run: mvn spotless:check
      
      # Проверка кода на соответствие правилам Checkstyle
      - name: Checkstyle validation
        run: mvn checkstyle:check
      
      # Сборка проекта и запуск unit тестов
      - name: Build and run tests
        run: mvn clean verify --no-transfer-progress

      # Проверка кода сонаром
      - name: SonarQube scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn sonar:sonar -Dsonar.projectKey=YNDXT -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN

      # Проверка результата Quality Gate
      - name: Verify SonarQube Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          STATUS=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=YNDXT" | jq -r '.projectStatus.status')

          echo "Quality Gate status: $STATUS"

          if [ "$STATUS" != "OK" ]; then
            echo "Quality Gate не пройден или есть критические issues."
            exit 1
          fi